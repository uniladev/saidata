{
    "openapi": "3.0.0",
    "info": {
        "title": "SAIDATA API Documentation",
        "description": "API Documentation untuk Sistem Informasi Akademik FMIPA",
        "contact": {
            "name": "FMIPA Unila",
            "email": "admin@fmipa.unila.ac.id"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8000",
            "description": "Local Development Server"
        }
    ],
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login via SSO with Role-based Authorization",
                "description": "Authenticate user with campus SSO credentials and receive JWT tokens. Returns user profile with organizational attributes. For admin users, profile.class field determines authorization scope: university, faculty, or department level access.",
                "operationId": "login",
                "requestBody": {
                    "description": "User credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "username": {
                                        "description": "NPM from SSO",
                                        "type": "string",
                                        "example": "2267051001"
                                    },
                                    "password": {
                                        "description": "User password (min 6 characters)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "headers": {
                            "Set-Cookie": {
                                "description": "HTTP-only refresh token cookie",
                                "schema": {
                                    "type": "string",
                                    "example": "refresh_token=abc123...; HttpOnly; Secure; SameSite=Strict"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "eyJ0eXAiOiJKV1QiLCJhbGc..."
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "example": "68ee2e761fa10bc4f109c732"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Dafahan"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "dafahan@example.com"
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "enum": [
                                                        "user",
                                                        "admin"
                                                    ],
                                                    "example": "user"
                                                },
                                                "profile": {
                                                    "description": "User profile with organizational attributes. For admin users, includes class field for authorization.",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Dafahan"
                                                        },
                                                        "faculty_code": {
                                                            "type": "string",
                                                            "example": "FMIPA",
                                                            "nullable": true
                                                        },
                                                        "department_code": {
                                                            "type": "string",
                                                            "example": "ILKOM",
                                                            "nullable": true
                                                        },
                                                        "study_program_code": {
                                                            "type": "string",
                                                            "example": "ILKOM-S1",
                                                            "nullable": true
                                                        },
                                                        "class": {
                                                            "description": "Admin class for authorization (only present for admin users)",
                                                            "type": "string",
                                                            "enum": [
                                                                "university",
                                                                "faculty",
                                                                "department"
                                                            ],
                                                            "example": "faculty",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Username atau password salah"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "properties": {
                                                "username": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The username field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password must be at least 6 characters."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login failed: Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user information",
                "description": "Get authenticated user information including profile with organizational attributes. For admin users, profile.class determines authorization level (university, faculty, department).",
                "operationId": "me",
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "example": "68ee2e761fa10bc4f109c732"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Dafahan"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "dafahan@example.com"
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "enum": [
                                                        "user",
                                                        "admin"
                                                    ],
                                                    "example": "user"
                                                },
                                                "profile": {
                                                    "description": "User profile with organizational data and admin class",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Dafahan"
                                                        },
                                                        "faculty_code": {
                                                            "type": "string",
                                                            "example": "FMIPA",
                                                            "nullable": true
                                                        },
                                                        "department_code": {
                                                            "type": "string",
                                                            "example": "ILKOM",
                                                            "nullable": true
                                                        },
                                                        "class": {
                                                            "type": "string",
                                                            "enum": [
                                                                "university",
                                                                "faculty",
                                                                "department"
                                                            ],
                                                            "example": "faculty",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "type": "object",
                                                    "nullable": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token invalid or expired"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "description": "Invalidate JWT token and clear refresh token",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Clears the refresh token cookie",
                                "schema": {
                                    "type": "string",
                                    "example": "refresh_token=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Logout failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to logout"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "description": "Get a new access token using refresh token from cookie (token rotation enabled)",
                "operationId": "refresh",
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "headers": {
                            "Set-Cookie": {
                                "description": "New HTTP-only refresh token cookie (token rotation)",
                                "schema": {
                                    "type": "string",
                                    "example": "refresh_token=xyz789...; HttpOnly; Secure; SameSite=Strict"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "eyJ0eXAiOiJKV1QiLCJhbGc..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Clears the invalid refresh token cookie",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid or expired refresh token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to refresh token"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/forms": {
            "get": {
                "tags": [
                    "Forms"
                ],
                "summary": "Get all forms",
                "description": "Retrieve all forms",
                "operationId": "bcad6aeac6086ec1d97b7245504ebcc3",
                "responses": {
                    "200": {
                        "description": "List of forms",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Form"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Forms"
                ],
                "summary": "Create new form",
                "description": "Create a new form with fields structure. Backend will generate MongoDB ObjectId and field IDs automatically.",
                "operationId": "9c6257241b15498a5c9fbb8e36879f40",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "form"
                                ],
                                "properties": {
                                    "form": {
                                        "required": [
                                            "title",
                                            "fields"
                                        ],
                                        "properties": {
                                            "title": {
                                                "type": "string",
                                                "maxLength": 255,
                                                "example": "Untitled Form"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "Form description"
                                            },
                                            "submitText": {
                                                "description": "Submit button text",
                                                "type": "string",
                                                "example": "Submit"
                                            },
                                            "successMessage": {
                                                "description": "Success message after submission",
                                                "type": "string",
                                                "example": "Thank you for your submission!"
                                            },
                                            "is_active": {
                                                "description": "Form active status",
                                                "type": "boolean",
                                                "example": true
                                            },
                                            "type": {
                                                "description": "Form type: service or record",
                                                "type": "string",
                                                "enum": [
                                                    "service",
                                                    "record"
                                                ],
                                                "example": "record"
                                            },
                                            "has_output": {
                                                "description": "Whether form generates output/results",
                                                "type": "boolean",
                                                "example": false
                                            },
                                            "template_url": {
                                                "description": "Path to template document",
                                                "type": "string",
                                                "example": "templates/forms/671292eb4c6b7a0d4e0b1234/1730000000_template.pdf",
                                                "nullable": true
                                            },
                                            "template_metadata": {
                                                "properties": {
                                                    "original_name": {
                                                        "type": "string",
                                                        "example": "Form_Template.pdf"
                                                    },
                                                    "size": {
                                                        "type": "integer",
                                                        "example": 1024000
                                                    },
                                                    "mime_type": {
                                                        "type": "string",
                                                        "example": "application/pdf"
                                                    },
                                                    "uploaded_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "uploaded_by": {
                                                        "type": "string",
                                                        "example": "68ee3e2c533619c833053652"
                                                    }
                                                },
                                                "type": "object",
                                                "nullable": true
                                            },
                                            "metadata": {
                                                "description": "Custom metadata for the form, e.g. category, tags, etc. Must be an object or array, not a string.",
                                                "type": "object",
                                                "example": {
                                                    "category": "survey",
                                                    "tags": [
                                                        "customer",
                                                        "feedback"
                                                    ]
                                                },
                                                "nullable": true
                                            },
                                            "fields": {
                                                "type": "array",
                                                "items": {
                                                    "required": [
                                                        "type",
                                                        "label",
                                                        "name"
                                                    ],
                                                    "properties": {
                                                        "type": {
                                                            "type": "string",
                                                            "enum": [
                                                                "text",
                                                                "textarea",
                                                                "number",
                                                                "email",
                                                                "date",
                                                                "time",
                                                                "datetime-local",
                                                                "url",
                                                                "tel",
                                                                "password",
                                                                "select",
                                                                "radio",
                                                                "checkbox",
                                                                "file",
                                                                "rating",
                                                                "signature",
                                                                "matrix",
                                                                "repeater"
                                                            ],
                                                            "example": "text"
                                                        },
                                                        "label": {
                                                            "type": "string",
                                                            "example": "New Text Input"
                                                        },
                                                        "name": {
                                                            "description": "Field name for form data",
                                                            "type": "string",
                                                            "example": "field_1"
                                                        },
                                                        "required": {
                                                            "type": "boolean",
                                                            "example": false
                                                        },
                                                        "placeholder": {
                                                            "type": "string",
                                                            "example": "Enter text here"
                                                        },
                                                        "helpText": {
                                                            "type": "string",
                                                            "example": "Help text for the field"
                                                        },
                                                        "validation": {
                                                            "description": "Validation rules object",
                                                            "type": "object",
                                                            "example": [],
                                                            "nullable": true
                                                        },
                                                        "options": {
                                                            "description": "Options for select, radio, checkbox fields",
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "example": [
                                                                "Option 1",
                                                                "Option 2"
                                                            ]
                                                        },
                                                        "fileOptions": {
                                                            "description": "File upload options",
                                                            "type": "object",
                                                            "example": [],
                                                            "nullable": true
                                                        },
                                                        "min": {
                                                            "description": "Minimum value for number fields",
                                                            "type": "number",
                                                            "example": 0,
                                                            "nullable": true
                                                        },
                                                        "max": {
                                                            "description": "Maximum value for number fields",
                                                            "type": "number",
                                                            "example": 100,
                                                            "nullable": true
                                                        },
                                                        "step": {
                                                            "description": "Step value for number fields",
                                                            "type": "number",
                                                            "nullable": true
                                                        },
                                                        "rows": {
                                                            "description": "Rows for textarea",
                                                            "type": "integer",
                                                            "nullable": true
                                                        },
                                                        "maxRating": {
                                                            "description": "Maximum rating value",
                                                            "type": "integer",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Form created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Form created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Form"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/forms/{id}": {
            "get": {
                "tags": [
                    "Forms"
                ],
                "summary": "Get form by ID",
                "description": "Retrieve a specific form by MongoDB ObjectId",
                "operationId": "5f0cd5c61e672872fc3de42d9bd86a9d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Form"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Forms"
                ],
                "summary": "Update form",
                "description": "Update an existing form. Backend will preserve existing field IDs and generate new IDs for new fields. Supports template document upload.",
                "operationId": "cd7f11d5218d6865724c77f1ea25d841",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "form"
                                ],
                                "properties": {
                                    "form": {
                                        "description": "JSON string of form data with title, description, fields, etc.",
                                        "type": "string",
                                        "example": "{\"title\":\"Updated Form\",\"type\":\"service\",\"has_output\":true,\"fields\":[{\"type\":\"text\",\"label\":\"Name\",\"name\":\"name\",\"required\":true}]}"
                                    },
                                    "template": {
                                        "description": "Template document file (DOCX)",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "remove_template": {
                                        "description": "Set to true to remove existing template",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "increment_version": {
                                        "description": "Set to true to create new version",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "change_summary": {
                                        "description": "Summary of changes made",
                                        "type": "string",
                                        "example": "Added template document"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Form updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Form updated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "form": {
                                                    "$ref": "#/components/schemas/Form"
                                                },
                                                "version_incremented": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "previous_version": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "template_updated": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not the form creator"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Forms"
                ],
                "summary": "Delete form permanently",
                "description": "Permanently delete a form. Only forms with zero submissions can be deleted.",
                "operationId": "01f1be53256aaaaa8a2db6c2e9876bf8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Form deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Cannot delete form with submissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Cannot delete form with existing submissions"
                                        },
                                        "submission_count": {
                                            "type": "integer",
                                            "example": 5
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/forms/{id}/toggle-status": {
            "patch": {
                "tags": [
                    "Forms"
                ],
                "summary": "Toggle form active/inactive status",
                "description": "Toggle form between active and inactive status. Inactive forms cannot receive new submissions.",
                "operationId": "b25c0ca4366adb4c3d741f456dbcc0ae",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form status toggled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Form status updated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "_id": {
                                                    "type": "string"
                                                },
                                                "title": {
                                                    "type": "string"
                                                },
                                                "is_active": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/forms/{id}/history": {
            "get": {
                "tags": [
                    "Forms"
                ],
                "summary": "Get form version history",
                "description": "Retrieve all version history of a form",
                "operationId": "bede2b04b91dfe541a7f79a1a522a7db",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form version history",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "_id": {
                                                        "type": "string"
                                                    },
                                                    "form_id": {
                                                        "type": "string"
                                                    },
                                                    "version": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "title": {
                                                        "type": "string"
                                                    },
                                                    "fields": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object"
                                                        }
                                                    },
                                                    "change_summary": {
                                                        "type": "string"
                                                    },
                                                    "changed_by": {
                                                        "type": "object"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/forms/{id}/version/{version}": {
            "get": {
                "tags": [
                    "Forms"
                ],
                "summary": "Get specific form version",
                "description": "Retrieve a specific version of a form from history",
                "operationId": "a43ee49a3f631cec5f2b519af72b35a9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form version details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Version not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/forms/{formId}/submissions": {
            "get": {
                "tags": [
                    "Form Submissions"
                ],
                "summary": "Get all submissions for a form",
                "description": "Retrieve all submissions for a specific form with submitter details",
                "operationId": "83d864e171784c14759cab954e147346",
                "parameters": [
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "MongoDB ObjectId of the form (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of submissions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "_id": {
                                                        "type": "string",
                                                        "example": "671292eb4c6b7a0d4e0b5678"
                                                    },
                                                    "form_id": {
                                                        "type": "string",
                                                        "example": "671292eb4c6b7a0d4e0b1234"
                                                    },
                                                    "form_version": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "form_title": {
                                                        "type": "string",
                                                        "example": "Customer Satisfaction Survey"
                                                    },
                                                    "submitted_by": {
                                                        "type": "string",
                                                        "example": "671292eb4c6b7a0d4e0b9999"
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "enum": [
                                                            "completed",
                                                            "draft"
                                                        ],
                                                        "example": "completed"
                                                    },
                                                    "submitter": {
                                                        "properties": {
                                                            "_id": {
                                                                "type": "string",
                                                                "example": "671292eb4c6b7a0d4e0b9999"
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "John Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john@example.com"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-10-20T10:30:00.000000Z"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-10-20T10:30:00.000000Z"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid form ID format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid form ID format"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/submissions/{id}": {
            "get": {
                "tags": [
                    "Form Submissions"
                ],
                "summary": "Get submission by ID with payload",
                "description": "Retrieve a specific submission with its payload, form details, and submitter information",
                "operationId": "6b0486e2f747bf2f082e69ad41f1971c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId of the submission (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b5678"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Submission details with payload",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "671292eb4c6b7a0d4e0b5678"
                                                },
                                                "form_id": {
                                                    "type": "string",
                                                    "example": "671292eb4c6b7a0d4e0b1234"
                                                },
                                                "form_version": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "form_title": {
                                                    "type": "string",
                                                    "example": "Customer Satisfaction Survey"
                                                },
                                                "submitted_by": {
                                                    "type": "string",
                                                    "example": "671292eb4c6b7a0d4e0b9999"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "completed",
                                                        "draft"
                                                    ],
                                                    "example": "completed"
                                                },
                                                "form": {
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string",
                                                            "example": "671292eb4c6b7a0d4e0b1234"
                                                        },
                                                        "title": {
                                                            "type": "string",
                                                            "example": "Customer Satisfaction Survey"
                                                        },
                                                        "slug": {
                                                            "type": "string",
                                                            "example": "customer-satisfaction-survey"
                                                        },
                                                        "version": {
                                                            "type": "integer",
                                                            "example": 1
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "submitter": {
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string",
                                                            "example": "671292eb4c6b7a0d4e0b9999"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "john@example.com"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "payload": {
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string",
                                                            "example": "671292eb4c6b7a0d4e0baaaa"
                                                        },
                                                        "submission_id": {
                                                            "type": "string",
                                                            "example": "671292eb4c6b7a0d4e0b5678"
                                                        },
                                                        "answers": {
                                                            "type": "object",
                                                            "example": {
                                                                "question1": "Very satisfied",
                                                                "question2": 5
                                                            }
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2024-10-20T10:30:00.000000Z"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2024-10-20T10:30:00.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid submission ID format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid submission ID format"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Form Submissions"
                ],
                "summary": "Update submission (draft only)",
                "description": "Update a draft submission. Completed submissions cannot be updated.",
                "operationId": "0d026f919c936898c8dd3aa24de6530f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId of the submission (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b5678"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "answers": {
                                        "description": "Updated answers (optional)",
                                        "type": "object",
                                        "example": {
                                            "field_1": "Updated answer",
                                            "field_2": 4
                                        }
                                    },
                                    "status": {
                                        "description": "Updated status (optional)",
                                        "type": "string",
                                        "enum": [
                                            "completed",
                                            "draft"
                                        ],
                                        "example": "completed"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Submission updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Submission updated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "_id": {
                                                    "type": "string"
                                                },
                                                "form_id": {
                                                    "type": "string"
                                                },
                                                "status": {
                                                    "type": "string"
                                                },
                                                "submitter": {
                                                    "type": "object"
                                                },
                                                "payload": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid submission ID format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid submission ID format"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Cannot update completed submission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Cannot update completed submission"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Form Submissions"
                ],
                "summary": "Delete submission",
                "description": "Delete a submission and its associated payload",
                "operationId": "6112a2e565010c5f1ec176f4397483e8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId of the submission (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b5678"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Submission deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Submission deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid submission ID format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid submission ID format"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Submission not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Submission not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to delete submission"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/forms/{formId}/submit": {
            "post": {
                "tags": [
                    "Form Submissions"
                ],
                "summary": "Submit Form response",
                "description": "Submit a new response to a form. Creates both submission record and payload.",
                "operationId": "eac47e5eb9b90878a86fb2c042273611",
                "parameters": [
                    {
                        "name": "formId",
                        "in": "path",
                        "description": "MongoDB ObjectId of the form (24 character hex string)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$",
                            "example": "671292eb4c6b7a0d4e0b1234"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "answers"
                                ],
                                "properties": {
                                    "answers": {
                                        "description": "Key-value pairs of field IDs and their answers",
                                        "type": "object",
                                        "example": {
                                            "field_1": "Very satisfied",
                                            "field_2": 5,
                                            "field_3": [
                                                "option1",
                                                "option2"
                                            ]
                                        }
                                    },
                                    "status": {
                                        "description": "Submission status (default: completed)",
                                        "type": "string",
                                        "enum": [
                                            "completed",
                                            "draft"
                                        ],
                                        "example": "completed"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Form submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Form submitted successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "671292eb4c6b7a0d4e0b5678"
                                                },
                                                "form_id": {
                                                    "type": "string",
                                                    "example": "671292eb4c6b7a0d4e0b1234"
                                                },
                                                "form_version": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "form_title": {
                                                    "type": "string",
                                                    "example": "Customer Satisfaction Survey"
                                                },
                                                "submitted_by": {
                                                    "type": "string",
                                                    "example": "671292eb4c6b7a0d4e0b9999"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "completed"
                                                },
                                                "submitter": {
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "email": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "payload": {
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string"
                                                        },
                                                        "submission_id": {
                                                            "type": "string"
                                                        },
                                                        "answers": {
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid form ID format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid form ID format"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Form is no longer active",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This form is no longer active"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Form not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Form not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error"
                                        },
                                        "errors": {
                                            "properties": {
                                                "answers": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The answers field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to submit form"
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "Database connection error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/menu": {
            "get": {
                "tags": [
                    "Menu"
                ],
                "summary": "Get dynamic menu structure for sidebar navigation",
                "description": "Returns menu structure based on user role. For students (role=user), menus are dynamically loaded from database filtered by faculty_code, department_code. For admins (role=admin), menus are hardcoded management tools only - admin users cannot use service menus, they only manage them.",
                "operationId": "getSidebarMenu",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved menu structure. Content varies by user role: Admin users get hardcoded management menus (Dashboard, DEVTEST tools, Validation, Settings, Help), Student users get dynamic service menus filtered by organizational attributes (faculty_code, department_code).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "menu": {
                                                    "description": "Array of menu items sorted by order",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "description": "Menu ID. Can be integer for fixed menus or string for database menus (e.g., fixed_l1_layanan_fakultas or MongoDB ObjectId)",
                                                                "type": "string",
                                                                "example": "fixed_l1_layanan_fakultas"
                                                            },
                                                            "name": {
                                                                "description": "Menu display name",
                                                                "type": "string",
                                                                "example": "Layanan Fakultas"
                                                            },
                                                            "icon": {
                                                                "description": "Icon name (Lucide React icon)",
                                                                "type": "string",
                                                                "example": "GraduationCap"
                                                            },
                                                            "path": {
                                                                "description": "Route path for menu without submenu",
                                                                "type": "string",
                                                                "example": "/dashboard"
                                                            },
                                                            "order": {
                                                                "description": "Display order",
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "roles": {
                                                                "description": "Allowed roles for this menu",
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string",
                                                                    "example": "admin"
                                                                }
                                                            },
                                                            "submenu": {
                                                                "description": "Child menu items (L2/L3 menus from database)",
                                                                "type": "array",
                                                                "items": {
                                                                    "properties": {
                                                                        "id": {
                                                                            "description": "MongoDB ObjectId of L2/L3 menu",
                                                                            "type": "string",
                                                                            "example": "672313923808a3af4e0806c8"
                                                                        },
                                                                        "name": {
                                                                            "description": "Submenu display name",
                                                                            "type": "string",
                                                                            "example": "Permohonan Surat Keterangan"
                                                                        },
                                                                        "path": {
                                                                            "description": "Route path",
                                                                            "type": "string",
                                                                            "example": "/forms/surat-keterangan"
                                                                        },
                                                                        "order": {
                                                                            "description": "Display order within submenu",
                                                                            "type": "integer",
                                                                            "example": 1
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "user_info": {
                                                    "description": "User's organizational attributes and admin class",
                                                    "properties": {
                                                        "faculty": {
                                                            "type": "string",
                                                            "example": "FMIPA",
                                                            "nullable": true
                                                        },
                                                        "faculty_code": {
                                                            "type": "string",
                                                            "example": "FMIPA",
                                                            "nullable": true
                                                        },
                                                        "department": {
                                                            "type": "string",
                                                            "example": "ILKOM",
                                                            "nullable": true
                                                        },
                                                        "department_code": {
                                                            "type": "string",
                                                            "example": "ILKOM",
                                                            "nullable": true
                                                        },
                                                        "study_program": {
                                                            "type": "string",
                                                            "example": "ILKOM-S1",
                                                            "nullable": true
                                                        },
                                                        "study_program_code": {
                                                            "type": "string",
                                                            "example": "ILKOM-S1",
                                                            "nullable": true
                                                        },
                                                        "class": {
                                                            "description": "Admin class for authorization (only present for admin users)",
                                                            "type": "string",
                                                            "enum": [
                                                                "university",
                                                                "faculty",
                                                                "department"
                                                            ],
                                                            "example": "faculty",
                                                            "nullable": true
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated - No valid JWT token provided",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/management/menu": {
            "get": {
                "tags": [
                    "Menu Management"
                ],
                "summary": "Get all menus with hierarchy (Admin Only)",
                "description": "Retrieve menu hierarchy with role-based access control using profile.class field. Admin authorization: University admin (profile.class='university') manages universitas + update_data scopes, Faculty admin (profile.class='faculty') manages fakultas scope with faculty_code filter, Department admin (profile.class='department') manages jurusan scope with faculty_code + department_code filter. Level 1 categories are hardcoded, Level 2-3 items are manageable from database.",
                "operationId": "getMenus",
                "parameters": [
                    {
                        "name": "scope",
                        "in": "query",
                        "description": "Filter by scope. Authorization rules: University admin (profile.class='university') → universitas+update_data, Faculty admin (profile.class='faculty') → fakultas (with faculty_code), Department admin (profile.class='department') → jurusan (with faculty_code+department_code)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "universitas",
                                "fakultas",
                                "jurusan",
                                "update_data"
                            ]
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Filter by level. level=1 returns fixed L1 categories only (flat, no children). level=2 returns L2 menus from database only. level=3 returns L3 menus from database only. Without this parameter, returns complete hierarchy with L1 as parent and L2/L3 as nested children.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2,
                                3
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Menus retrieved successfully"
                                        },
                                        "data": {
                                            "description": "Array of menu items. Structure depends on level parameter: level=1 returns flat array of L1 only, level=2/3 returns flat array of L2/L3 only, no level returns hierarchical structure with children",
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "Fixed L1 IDs use prefix 'fixed_l1_', database menus use MongoDB ObjectId",
                                                        "type": "string",
                                                        "example": "fixed_l1_layanan_universitas"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Layanan Universitas"
                                                    },
                                                    "level": {
                                                        "description": "Menu level: 1=Fixed category, 2=Subcategory, 3=Form",
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "scope": {
                                                        "type": "string",
                                                        "enum": [
                                                            "universitas",
                                                            "fakultas",
                                                            "jurusan",
                                                            "update_data"
                                                        ],
                                                        "example": "universitas"
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "category",
                                                            "subcategory",
                                                            "form"
                                                        ],
                                                        "example": "category"
                                                    },
                                                    "icon": {
                                                        "description": "Only L1 categories have icons",
                                                        "type": "string",
                                                        "example": "fas fa-university",
                                                        "nullable": true
                                                    },
                                                    "parent_id": {
                                                        "description": "For L2/L3: references parent menu (fixed L1 ID or ObjectId)",
                                                        "type": "string",
                                                        "example": "fixed_l1_layanan_fakultas",
                                                        "nullable": true
                                                    },
                                                    "route": {
                                                        "type": "string",
                                                        "example": "/forms/surat-keterangan",
                                                        "nullable": true
                                                    },
                                                    "form_id": {
                                                        "type": "string",
                                                        "nullable": true
                                                    },
                                                    "faculty_code": {
                                                        "type": "string",
                                                        "example": "FMIPA",
                                                        "nullable": true
                                                    },
                                                    "department_code": {
                                                        "type": "string",
                                                        "example": "ILKOM",
                                                        "nullable": true
                                                    },
                                                    "is_fixed": {
                                                        "description": "True for Level 1 fixed categories, false for manageable L2/L3 menus",
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "is_active": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "order": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "children": {
                                                        "description": "Child menu items (L2/L3 nested hierarchy, only present without level parameter)",
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "_id": {
                                                                    "type": "string",
                                                                    "example": "672313923808a3af4e0806c8"
                                                                },
                                                                "name": {
                                                                    "type": "string",
                                                                    "example": "Layanan Akademik"
                                                                },
                                                                "level": {
                                                                    "type": "integer",
                                                                    "example": 2
                                                                },
                                                                "type": {
                                                                    "type": "string",
                                                                    "enum": [
                                                                        "category",
                                                                        "subcategory",
                                                                        "form"
                                                                    ],
                                                                    "example": "category"
                                                                },
                                                                "parent_id": {
                                                                    "type": "string",
                                                                    "example": "fixed_l1_layanan_fakultas"
                                                                },
                                                                "children": {
                                                                    "description": "L3 nested children (if L2 is category)",
                                                                    "type": "array",
                                                                    "items": {
                                                                        "properties": {
                                                                            "_id": {
                                                                                "type": "string",
                                                                                "example": "672313923808a3af4e0806c9"
                                                                            },
                                                                            "name": {
                                                                                "type": "string",
                                                                                "example": "Transkrip dan Ijazah"
                                                                            },
                                                                            "level": {
                                                                                "type": "integer",
                                                                                "example": 3
                                                                            },
                                                                            "type": {
                                                                                "type": "string",
                                                                                "enum": [
                                                                                    "subcategory",
                                                                                    "form"
                                                                                ],
                                                                                "example": "subcategory"
                                                                            },
                                                                            "parent_id": {
                                                                                "type": "string",
                                                                                "example": "672313923808a3af4e0806c8"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "nullable": true
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not an admin user or trying to access unauthorized scope based on profile.class",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized. Faculty admin (profile.class='faculty') can only access fakultas scope for their faculty_code."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Menu Management"
                ],
                "summary": "Create a new menu (Admin Only - Role-based Authorization)",
                "description": "Create a new menu item (Level 2 or 3 only - Level 1 categories are fixed). Authorization based on profile.class: University admin creates universitas+update_data scope menus, Faculty admin creates fakultas scope menus (with faculty_code validation), Department admin creates jurusan scope menus (with faculty_code+department_code validation). Level 3 can be both subcategory or form types for flexible hierarchy.",
                "operationId": "createMenu",
                "requestBody": {
                    "description": "Menu data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "level",
                                    "scope",
                                    "type"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Surat Keterangan Mahasiswa"
                                    },
                                    "level": {
                                        "description": "Level 1 categories are fixed/hardcoded and cannot be created",
                                        "type": "integer",
                                        "maximum": 3,
                                        "minimum": 2,
                                        "example": 2
                                    },
                                    "scope": {
                                        "description": "Scope must match admin authorization: profile.class='university' → universitas/update_data, profile.class='faculty' → fakultas, profile.class='department' → jurusan",
                                        "type": "string",
                                        "enum": [
                                            "universitas",
                                            "fakultas",
                                            "jurusan",
                                            "update_data"
                                        ],
                                        "example": "universitas"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "category",
                                            "subcategory",
                                            "form"
                                        ],
                                        "example": "form"
                                    },
                                    "icon": {
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "fas fa-file",
                                        "nullable": true
                                    },
                                    "parent_id": {
                                        "description": "Can be MongoDB ObjectId or fixed L1 category ID (e.g., fixed_l1_layanan_fakultas)",
                                        "type": "string",
                                        "example": "fixed_l1_layanan_fakultas",
                                        "nullable": true
                                    },
                                    "route": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "/forms/surat-keterangan",
                                        "nullable": true
                                    },
                                    "form_id": {
                                        "type": "string",
                                        "example": "507f1f77bcf86cd799439012",
                                        "nullable": true
                                    },
                                    "faculty_code": {
                                        "type": "string",
                                        "maxLength": 10,
                                        "example": "FT",
                                        "nullable": true
                                    },
                                    "department_code": {
                                        "type": "string",
                                        "maxLength": 10,
                                        "example": "IF",
                                        "nullable": true
                                    },
                                    "is_active": {
                                        "type": "boolean",
                                        "default": true,
                                        "example": true
                                    },
                                    "order": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Menu created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Menu created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "507f1f77bcf86cd799439013"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "level": {
                                                    "type": "integer"
                                                },
                                                "scope": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error, invalid business rule, or attempt to create Level 1 category"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to create in this scope based on profile.class or organizational code mismatch"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/management/menu/{id}": {
            "get": {
                "tags": [
                    "Menu Management"
                ],
                "summary": "Get menu by ID",
                "description": "Retrieve a specific menu item with its parent and children relationships",
                "operationId": "showMenu",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Menu MongoDB ObjectId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Menu retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "507f1f77bcf86cd799439011"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "level": {
                                                    "type": "integer"
                                                },
                                                "parent": {
                                                    "type": "object"
                                                },
                                                "children": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not authorized"
                    },
                    "404": {
                        "description": "Menu not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Menu Management"
                ],
                "summary": "Update menu (Admin Only - Role-based Authorization)",
                "description": "Update an existing menu item with profile.class-based authorization. Admin can only update menus within their authorized scope (University admin: universitas+update_data, Faculty admin: fakultas with faculty_code match, Department admin: jurusan with faculty_code+department_code match). Only name, icon, route, form_id, is_active, and order can be updated.",
                "operationId": "updateMenu",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Menu MongoDB ObjectId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Menu fields to update (partial update allowed)",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "Updated Menu Name"
                                    },
                                    "icon": {
                                        "type": "string",
                                        "maxLength": 100,
                                        "example": "fas fa-star",
                                        "nullable": true
                                    },
                                    "route": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "/forms/updated-route",
                                        "nullable": true
                                    },
                                    "form_id": {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "is_active": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "order": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Menu updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Menu updated successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid business rule"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to update this menu based on profile.class and organizational scope"
                    },
                    "404": {
                        "description": "Menu not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Menu Management"
                ],
                "summary": "Delete menu with cascade (Admin Only - Role-based Authorization)",
                "description": "Delete a menu item and all its children recursively (cascade delete) with profile.class-based authorization. Admin can only delete menus within their authorized scope based on organizational hierarchy. This is a permanent operation.",
                "operationId": "deleteMenu",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Menu MongoDB ObjectId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Menu deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Menu and 3 children deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to delete this menu based on profile.class and organizational scope"
                    },
                    "404": {
                        "description": "Menu not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/management/menu/reorder": {
            "post": {
                "tags": [
                    "Menu Management"
                ],
                "summary": "Reorder menus",
                "description": "Bulk update menu order. Only menus that the user has authorization to manage will be updated.",
                "operationId": "reorderMenus",
                "requestBody": {
                    "description": "Array of menus with new order values",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "menus"
                                ],
                                "properties": {
                                    "menus": {
                                        "type": "array",
                                        "items": {
                                            "required": [
                                                "id",
                                                "order"
                                            ],
                                            "properties": {
                                                "id": {
                                                    "type": "string",
                                                    "example": "507f1f77bcf86cd799439011"
                                                },
                                                "order": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "minItems": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Menus reordered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Menus reordered successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/users/{userId}/profile": {
            "get": {
                "tags": [
                    "User Profiles"
                ],
                "summary": "Get user profile by user ID",
                "description": "Retrieve profile for a specific user",
                "operationId": "04f204f71059d8bf7281ef291fc8d491",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "MongoDB ObjectId of the user",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile details"
                    },
                    "404": {
                        "description": "Profile not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/user-profiles": {
            "post": {
                "tags": [
                    "User Profiles"
                ],
                "summary": "Create user profile",
                "description": "Create a new user profile",
                "operationId": "383a38ef7f8b7f3036b3ea8bab2c4442",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "user_id"
                                ],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "example": "68ee3e2c5336195833053652"
                                    },
                                    "full_name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "123 Main St"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Profile created successfully"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/user-profiles/{id}": {
            "put": {
                "tags": [
                    "User Profiles"
                ],
                "summary": "Update user profile",
                "description": "Update an existing user profile",
                "operationId": "5ff67a911a207ce9cf5394b96de05bd8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "full_name": {
                                        "type": "string"
                                    },
                                    "phone": {
                                        "type": "string"
                                    },
                                    "address": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile updated successfully"
                    },
                    "404": {
                        "description": "Profile not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User Profiles"
                ],
                "summary": "Delete user profile",
                "description": "Delete a user profile",
                "operationId": "a26281abf789fc8640faa39b66bd0ade",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "MongoDB ObjectId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "^[a-f0-9]{24}$"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile deleted successfully"
                    },
                    "404": {
                        "description": "Profile not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Form": {
                "properties": {
                    "_id": {
                        "description": "MongoDB ObjectId",
                        "type": "string",
                        "example": "671292eb4c6b7a0d4e0b1234"
                    },
                    "title": {
                        "type": "string",
                        "example": "Untitled Form"
                    },
                    "description": {
                        "type": "string",
                        "example": "Form description"
                    },
                    "submitText": {
                        "type": "string",
                        "example": "Submit"
                    },
                    "successMessage": {
                        "type": "string",
                        "example": "Thank you for your submission!"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    },
                    "type": {
                        "description": "Form type",
                        "type": "string",
                        "enum": [
                            "service",
                            "record"
                        ],
                        "example": "record"
                    },
                    "has_output": {
                        "description": "Whether form generates output",
                        "type": "boolean",
                        "example": false
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Backend-generated unique field identifier",
                                    "type": "string",
                                    "example": "field_1760690243313_bhm124rg1"
                                },
                                "type": {
                                    "type": "string",
                                    "example": "text"
                                },
                                "label": {
                                    "type": "string",
                                    "example": "New Text Input"
                                },
                                "name": {
                                    "type": "string",
                                    "example": "field_1"
                                },
                                "required": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "placeholder": {
                                    "type": "string",
                                    "example": ""
                                },
                                "helpText": {
                                    "type": "string",
                                    "example": ""
                                },
                                "validation": {
                                    "type": "object",
                                    "nullable": true
                                },
                                "options": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "fileOptions": {
                                    "type": "object",
                                    "nullable": true
                                },
                                "min": {
                                    "type": "number",
                                    "nullable": true
                                },
                                "max": {
                                    "type": "number",
                                    "nullable": true
                                },
                                "step": {
                                    "type": "number",
                                    "nullable": true
                                },
                                "rows": {
                                    "type": "integer",
                                    "nullable": true
                                },
                                "maxRating": {
                                    "type": "integer",
                                    "nullable": true
                                }
                            },
                            "type": "object"
                        }
                    },
                    "metadata": {
                        "description": "Custom metadata for the form, e.g. category, tags, etc.",
                        "type": "object",
                        "example": {
                            "category": "survey",
                            "tags": [
                                "customer",
                                "feedback"
                            ]
                        },
                        "nullable": true
                    },
                    "created_by": {
                        "type": "string",
                        "example": "68ee3e2c533619c833053652"
                    },
                    "updated_by": {
                        "type": "string",
                        "example": "68ee3e2c533619c833053652"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "SidebarMenuResponse": {
                "description": "Response structure for sidebar menu endpoint",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "data": {
                        "properties": {
                            "menu": {
                                "description": "Complete menu structure for sidebar navigation",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MenuItem"
                                }
                            },
                            "user_info": {
                                "$ref": "#/components/schemas/UserOrganizationalInfo"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "MenuItem": {
                "description": "Single menu item in sidebar navigation",
                "properties": {
                    "id": {
                        "description": "Menu identifier",
                        "type": "string",
                        "example": "fixed_l1_layanan_fakultas"
                    },
                    "name": {
                        "description": "Display name",
                        "type": "string",
                        "example": "Layanan Fakultas"
                    },
                    "icon": {
                        "description": "Lucide React icon name",
                        "type": "string",
                        "example": "GraduationCap"
                    },
                    "path": {
                        "description": "Route path (optional if has submenu)",
                        "type": "string",
                        "example": "/dashboard"
                    },
                    "order": {
                        "description": "Display order",
                        "type": "integer",
                        "example": 2
                    },
                    "roles": {
                        "description": "Allowed user roles",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "admin",
                                "user"
                            ]
                        }
                    },
                    "submenu": {
                        "description": "Child menu items",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Submenu"
                        }
                    }
                },
                "type": "object"
            },
            "Submenu": {
                "description": "Submenu item (L2/L3 from database with nested hierarchy support)",
                "properties": {
                    "id": {
                        "description": "MongoDB ObjectId",
                        "type": "string",
                        "example": "672313923808a3af4e0806c8"
                    },
                    "name": {
                        "description": "Display name",
                        "type": "string",
                        "example": "Layanan Akademik"
                    },
                    "path": {
                        "description": "Route path (null for categories with submenu)",
                        "type": "string",
                        "example": "/forms/surat-aktif-kuliah",
                        "nullable": true
                    },
                    "order": {
                        "description": "Display order",
                        "type": "integer",
                        "example": 1
                    },
                    "type": {
                        "description": "Menu item type",
                        "type": "string",
                        "enum": [
                            "category",
                            "subcategory",
                            "form"
                        ],
                        "example": "category"
                    },
                    "submenu": {
                        "description": "L3 children (only present if this L2 item has nested items)",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "MongoDB ObjectId of L3 menu",
                                    "type": "string",
                                    "example": "672313923808a3af4e0806c9"
                                },
                                "name": {
                                    "description": "L3 item name",
                                    "type": "string",
                                    "example": "Transkrip dan Ijazah"
                                },
                                "path": {
                                    "description": "Route path",
                                    "type": "string",
                                    "example": "/forms/transkrip",
                                    "nullable": true
                                },
                                "order": {
                                    "description": "Display order within L2",
                                    "type": "integer",
                                    "example": 1
                                },
                                "type": {
                                    "description": "L3 item type",
                                    "type": "string",
                                    "enum": [
                                        "subcategory",
                                        "form"
                                    ],
                                    "example": "subcategory"
                                }
                            },
                            "type": "object"
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UserOrganizationalInfo": {
                "description": "User's organizational attributes and admin class from profile",
                "properties": {
                    "faculty": {
                        "type": "string",
                        "example": "FMIPA",
                        "nullable": true
                    },
                    "faculty_code": {
                        "type": "string",
                        "example": "FMIPA",
                        "nullable": true
                    },
                    "department": {
                        "type": "string",
                        "example": "ILKOM",
                        "nullable": true
                    },
                    "department_code": {
                        "type": "string",
                        "example": "ILKOM",
                        "nullable": true
                    },
                    "study_program": {
                        "type": "string",
                        "example": "ILKOM-S1",
                        "nullable": true
                    },
                    "study_program_code": {
                        "type": "string",
                        "example": "ILKOM-S1",
                        "nullable": true
                    },
                    "class": {
                        "description": "Admin class determining authorization scope (only for admin users)",
                        "type": "string",
                        "enum": [
                            "university",
                            "faculty",
                            "department"
                        ],
                        "example": "faculty",
                        "nullable": true
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Enter JWT token in format: Bearer {token}",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "API Endpoints for user authentication"
        },
        {
            "name": "Menu Management",
            "description": "API endpoints for managing hierarchical menu system with profile.class-based authorization. University admin (profile.class='university') manages universitas+update_data scopes, Faculty admin (profile.class='faculty') manages fakultas scope with faculty_code validation, Department admin (profile.class='department') manages jurusan scope with faculty_code+department_code validation."
        },
        {
            "name": "Forms",
            "description": "Forms"
        },
        {
            "name": "Form Submissions",
            "description": "Form Submissions"
        },
        {
            "name": "Menu",
            "description": "Menu"
        },
        {
            "name": "User Profiles",
            "description": "User Profiles"
        }
    ]
}